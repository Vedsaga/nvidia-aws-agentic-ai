{
  "kriya_extraction_prompt": "Extract verbs and semantic roles.\n\nRoles:\n- KARTA = who does the action (STRING)\n- KARMA = what is acted upon (STRING)\n- SAMPRADANA = who receives (STRING)\n- KARANA = tool used (STRING)\n\nCRITICAL: All role values MUST be strings, NEVER arrays or objects.\n\nFormat:\n{\"extractions\":[{\"verb\":\"action\",\"karakas\":{\"KARTA\":\"agent\",\"KARMA\":\"object\"}}]}\n\nExamples:\n\nInput: \"John gave Mary a book.\"\nOutput: {\"extractions\":[{\"verb\":\"gave\",\"karakas\":{\"KARTA\":\"John\",\"KARMA\":\"book\",\"SAMPRADANA\":\"Mary\"}}]}\n\nInput: \"Dr. Smith and Prof. Lee reviewed the data.\"\nOutput: {\"extractions\":[{\"verb\":\"reviewed\",\"karakas\":{\"KARTA\":\"Dr. Smith and Prof. Lee\",\"KARMA\":\"data\"}}]}\n\nWRONG: {\"KARTA\":[\"Dr. Smith and Prof. Lee\"]} - NO ARRAYS!\nRIGHT: {\"KARTA\":\"Dr. Smith and Prof. Lee\"} - STRING!",
  "kriya_extraction_feedback_prompt": "Previous attempt failed: {feedback}\n\nFix these issues and generate a NEW extraction:\n\n1. Extract ALL verbs (if multiple actions exist)\n2. KARTA = agent/doer (who does it)\n3. KARMA = patient/object (what is acted upon)\n4. Keep compound agents together (\"X and Y\" as one KARTA)\n5. Don't hallucinate - only extract what's in the text\n6. Return valid JSON with extractions array\n\nCommon mistakes to avoid:\n- Swapping agent and patient\n- Splitting compound agents\n- Adding entities not in text\n- Invalid JSON syntax",
  "kriya_scoring_prompt": "Score this semantic role extraction from 1-100.\n\nCheck:\n1. Verb correct? (20 pts)\n2. KARTA (agent) correct? (20 pts)\n3. KARMA (patient) correct? (20 pts)\n4. Other roles correct? (20 pts)\n5. JSON valid? (10 pts)\n6. Nothing hallucinated? (10 pts)\n\nCommon errors:\n- Agent labeled as patient\n- Missing compound agents (\"X and Y\")\n- Wrong verb tense\n- Hallucinated entities\n\nReturn JSON:\n{\"score\":85,\"reasoning\":\"Verb correct, KARTA correct, but KARMA missing\"}\n\nBe strict. Deduct 20 points per major error.",
  "kriya_verification_prompt": "Verify semantic role extractions and pick the BEST one.\n\nInput:\n- original_text: source sentence\n- candidates: list of extractions\n\nEach extraction has:\n- verb: the action\n- karakas: semantic roles (KARTA=agent, KARMA=patient, etc.)\n\nVerify:\n1. Verb matches the action in original_text\n2. KARTA (agent) appears in original_text - check the actual words\n3. KARMA (patient) appears in original_text - check the actual words\n4. Roles are correct: KARTA does the action, KARMA receives it\n\nExample:\noriginal_text: \"Dr. Smith and Prof. Lee reviewed the data.\"\nGOOD: verb=\"reviewed\", KARTA=\"Dr. Smith and Prof. Lee\", KARMA=\"data\"\nBAD: verb=\"analyzed\" (wrong verb)\nBAD: KARTA=\"data\" (swapped roles)\n\nIf multiple candidates are identical and correct, pick any one (e.g., Candidate_A).\n\nReturn JSON:\n{\"choice\":\"Candidate_A\"}\n\nOnly return ALL_INVALID if ALL candidates have wrong verbs or swapped roles:\n{\"choice\":\"ALL_INVALID\",\"reasoning\":\"all have wrong verb\"}",
  "query_decomposition_prompt": "Decompose the user query into a simple graph search plan.\n\nReturn JSON:\n{\"steps\":[{\"step_number\":1,\"description\":\"what to find\",\"entity\":\"target entity or null\",\"verb\":\"target action or null\"}],\"expected_hops\":1}\n\nExamples:\n\nQuery: \"Who is Rama?\"\nOutput: {\"steps\":[{\"step_number\":1,\"description\":\"Find entity Rama\",\"entity\":\"Rama\",\"verb\":null}],\"expected_hops\":1}\n\nQuery: \"What did John do?\"\nOutput: {\"steps\":[{\"step_number\":1,\"description\":\"Find actions by John\",\"entity\":\"John\",\"verb\":null}],\"expected_hops\":1}",
  "query_scoring_prompt": "Score this query plan from 1-100.\n\nCheck:\n1. Has valid steps? (50 pts)\n2. Entity/verb specified? (30 pts)\n3. Valid JSON? (20 pts)\n\nReturn JSON:\n{\"score\":85,\"reasoning\":\"Valid plan with clear entity\"}",
  "query_verification_prompt": "Pick the BEST query plan.\n\nCheck:\n1. Has valid steps array?\n2. Entity or verb specified?\n3. Valid JSON format?\n\nReturn JSON:\n{\"choice\":\"Candidate_A\"}\n\nOr if all invalid:\n{\"choice\":\"ALL_INVALID\",\"reasoning\":\"missing steps\"}",
  "coreference_resolution_prompt": "You are a coreference resolution expert. Given a pronoun and surrounding context, identify what entity the pronoun refers to.\n\nReturn JSON with this structure:\n{\n  \"referent\": \"<entity name>\",\n  \"confidence\": \"<high|medium|low>\",\n  \"reasoning\": \"<brief explanation>\"\n}\n\nIf unable to resolve, return {\"referent\": null, \"confidence\": \"low\", \"reasoning\": \"insufficient context\"}",
  "sentence_split_prompt": "Split text into sentences. Return ONLY a JSON array.\n\nRules:\n- Preserve text exactly (no changes to words, punctuation, or capitalization)\n- Don't split on: Dr., Prof., Mr., Mrs., Ms., Inc., Ltd., Co., U.S., U.K., a.m., p.m., etc.\n- Don't split on decimals: $2.5 million, 3.14, 1.5 lbs.\n- Each sentence ends with . ! or ?\n- Return valid JSON array only\n\nExamples:\n\nInput: Dr. Chen left. He bought 1.5 lbs. of apples.\nOutput: [\"Dr. Chen left.\",\"He bought 1.5 lbs. of apples.\"]\n\nInput: The U.S. economy grew. Prof. Lee analyzed it.\nOutput: [\"The U.S. economy grew.\",\"Prof. Lee analyzed it.\"]"
}