# Prompts for Karaka Knowledge Graph System
# All system prompts extracted from google_colab_cells.py

# Core Extraction Prompts
kriya_extraction_prompt: |
  Extract verb-centric semantic structures using Karaka theory.
  Return JSON with extractions array containing verb and karakas.

kriya_extraction_feedback_prompt: |
  Previous extraction had issues. {feedback}
  Please correct and re-extract.

kriya_scoring_prompt: |
  Score this extraction from 1-100 based on correctness and completeness.
  Return JSON: {"score": <number>, "reasoning": "<text>"}

kriya_verification_prompt: |
  Given original text and multiple extraction candidates, choose the best one.
  Return JSON: {"choice": "<candidate_id>", "reasoning": "<text>"}
  If all invalid, return: {"choice": "ALL_INVALID", "reasoning": "<text>"}

# Query Processing Prompts
query_decomposition_prompt: |
  Decompose this query into sub-queries for knowledge graph traversal.
  Return JSON with query_type and sub_queries array.

query_scoring_prompt: |
  Score this query decomposition from 1-100.
  Return JSON: {"score": <number>, "reasoning": "<text>"}

query_verification_prompt: |
  Choose the best query decomposition from candidates.
  Return JSON: {"choice": "<candidate_id>", "reasoning": "<text>"}

# Sentence Splitting Prompt
sentence_split_prompt: |
  Split this text into sentences. Preserve all characters exactly.
  Return JSON array: ["sentence 1", "sentence 2", ...]

# Coreference Resolution Prompt
coreference_resolution_prompt: |
  Resolve what this pronoun/reference refers to in the context.
  Return the full entity name.

# Embedded Prompts (currently hardcoded in the code)
# These should be extracted to this file

metaphor_resolution_prompt: |
  You are an expert in resolving metaphorical and descriptive references to their actual entities.
  
  Given a metaphorical or descriptive name and context, identify the actual entity being referred to.
  
  Return JSON:
  {
    "actual_entity": "<entity name or null>",
    "confidence": "<high|medium|low>",
    "reasoning": "<explanation>"
  }
  
  Only return an entity if confident.

entity_type_classifier_prompt: |
  You are an entity type classifier. Given an entity name and context, classify it into ONE of these types:
  
  - Person: Human individuals
  - Deity: Gods, goddesses, divine beings
  - Location: Places, cities, forests, mountains
  - Organization: Groups, armies, kingdoms
  - Object: Physical objects, weapons, artifacts
  - Concept: Abstract concepts, emotions, qualities
  - Animal: Animals, creatures
  - Event: Named events, battles, ceremonies
  
  Return JSON:
  {
    "entity_type": "<type from list above>",
    "confidence": "<high|medium|low>",
    "reasoning": "<brief explanation>"
  }

causal_relationship_detector_prompt: |
  You are a causal relationship detector. Given two actions and their contexts, determine if one causes the other.
  
  Return JSON:
  {
    "is_causal": <true|false>,
    "direction": "<forward|backward|null>",
    "confidence": "<high|medium|low>",
    "reasoning": "<brief explanation>"
  }
  
  Direction:
  - "forward": First action causes second action
  - "backward": Second action causes first action
  - null: No causal relationship

answer_generator_prompt: |
  You are a precise answer generator. Form a natural answer using ONLY the provided context.
  
  Rules:
  - Use only information from the context
  - Keep it concise
  - Cite sources
  - Do not add information not in the context

sentence_split_retry_prompt: |
  Your previous sentence split contained errors. 
  Re-split this text EXACTLY, preserving every character. 
  Focus especially on this region: "...{context_snippet}..."

sentence_split_simple_prompt: |
  Split into sentences. Return JSON array only.

# User Prompt Templates
# These are used to format user prompts with context

metaphor_resolution_user_template: |
  Metaphorical reference: "{metaphor}"
  
  Context:
  {context}
  
  What is the actual entity being referred to?

entity_type_classifier_user_template: |
  Entity: "{entity_name}"
  
  Context:
  {context}
  
  What type is this entity?

causal_relationship_user_template: |
  Action 1: "{verb1}"
  Context 1: {text1}
  
  Action 2: "{verb2}"
  Context 2: {text2}
  
  Is there a causal relationship between these actions?

answer_generator_user_template: |
  Question: {question}
  
  Context:
  {context}
  
  Natural Answer:

coreference_resolution_user_template: |
  Pronoun/Reference: "{hint}"
  
  Context:
  {context}
  
  What does this refer to? Return the full entity name.

# ============================================================================
# OPTIMIZATION: Reasoning-Mode Prompts for Llama-3.1-Nemotron-Nano-8B-v1
# ============================================================================

# Phase 3: Single-Shot Kriya Extraction (OPTIMIZED)
kriya_extraction_single_shot_prompt: |
  You are a semantic role labeling expert using Karaka theory.
  
  Extract verb-centric semantic structures (Kriyas) from the input sentence.
  
  Steps:
  1. Identify the main verb (Kriya)
  2. Extract semantic roles (Karakas) that are EXPLICITLY present:
     - KARTA: Agent/doer
     - KARMA: Patient/object
     - KARANA: Instrument
     - SAMPRADANA: Recipient
     - APADANA: Source
     - ADHIKARANA_SPATIAL: Location
     - ADHIKARANA_TEMPORAL: Time
  
  3. Self-verify:
     - Is the verb clearly identifiable?
     - Are the roles explicitly stated (not inferred)?
     - Are there any ambiguities?
  
  4. Assign confidence (0.0-1.0) based on verification
  
  Output Format (JSON):
  {
    "extractions": [
      {
        "verb": "...",
        "karakas": {"KARTA": "...", "KARMA": "..."},
        "confidence": 0.95
      }
    ],
    "confidence": 0.95
  }
  
  If no clear verb exists:
  {
    "extractions": [],
    "confidence": 0.0,
    "reason": "No clear verb found"
  }

# Phase 3: Single-Shot Query Decomposition (OPTIMIZED)
query_decomposition_single_shot_prompt: |
  You are a query understanding expert for knowledge graph retrieval.
  
  Decompose the user query into sub-queries that can be answered using a Karaka knowledge graph.
  
  Knowledge Graph Structure:
  - Nodes: Kriyas (verbs), Entities, Documents
  - Edges: Karaka relations (KARTA, KARMA, etc.), causality, coreference
  
  Steps:
  1. Identify query type:
     - entity_lookup: "Who is X?"
     - action_lookup: "What did X do?"
     - relation_lookup: "What is the relationship between X and Y?"
     - causal_chain: "What caused X?"
     - temporal_sequence: "What happened after X?"
  
  2. Decompose into graph traversal steps
  3. Self-verify completeness
  4. Assign confidence
  
  Output Format (JSON):
  {
    "query_type": "action_lookup",
    "sub_queries": [
      {
        "step": 1,
        "description": "Find entity 'Rama'",
        "graph_operation": "node_lookup",
        "target": "Rama"
      }
    ],
    "confidence": 0.95
  }
